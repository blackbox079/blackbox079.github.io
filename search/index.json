[{"content":"puppeteer 是由 Chrome 团队发布的 Node.js 库，通过 DevTools 协议来操作Chrome或Chromium浏览器。这里使用 puppeteer 来进行爬取，并通过 Node.js 将数据存储到文件。\n差异 可以使用 axios 判断网络环境，如果无法访问则在启动参数里加入代理 --proxy-server=127.0.0.1:7890 。\n1 2 3 4 5 6 7 8 async function checkNetwork() { try { await axios.get(\u0026#39;https://open.spotify.com/\u0026#39;); return true; // 如果能正常访问，返回true } catch (error) { return false; // 如果无法访问，返回false } } puppeteer 是通过无头浏览器（无图形界面的浏览器模式）来进行访问，需要安装Chrome或Chromium。本地直接安装就行，内地服务器无法打开 google.com 的话直接换成 .cn 域名后缀就行。\n1 2 sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm sudo yum localinstall -y google-chrome-stable_current_x86_64.rpm 指定Chrome路径并关闭沙盒，headless即为无头模式，可将值设为true或者new。\n1 2 3 4 5 const browser = await puppeteer.launch({ executablePath: \u0026#39;/usr/bin/google-chrome-stable\u0026#39;, headless: \u0026#39;new\u0026#39;, args: [\u0026#39;--no-sandbox\u0026#39;] }); 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 const puppeteer = require(\u0026#39;puppeteer\u0026#39;); const axios = require(\u0026#39;axios\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const { resolve } = require(\u0026#39;path\u0026#39;); // 简单判断环境 async function checkNetwork() { try { await axios.get(\u0026#39;https://open.spotify.com/\u0026#39;); return true; // 如果能正常访问，返回true } catch (error) { return false; // 如果无法访问，返回false } } // 设定是以年份为目录，将每个月的数据都放在同一个文件，如果文件不存在则创建。服务器可使用项目地址的绝对路径 // Excel无法识别不带BOM的UTF-8编码，所以需在文件头加入\\ufeff。WPS都可以识别。 const currentDate = new Date(); const year = currentDate.getFullYear(); const month = (currentDate.getMonth() + 1).toString().padStart(2, \u0026#39;0\u0026#39;); const folderPath = `./data/${year}`; const filePath = resolve(folderPath, `spotify_${year}${month}.csv`); if (!fs.existsSync(filePath)) { fs.mkdirSync(folderPath, { recursive: true }); fs.writeFileSync(filePath, \u0026#39;\\ufeff日期时间,收听数量,粉丝数量\\n\u0026#39;, \u0026#39;utf8\u0026#39;); } // 净化数据，只保留数值 function pureData(text) { return text.replace(/(\u0026lt;([^\u0026gt;]+)\u0026gt;)/gi, \u0026#39;\u0026#39;).replace(/[^\\d]/g, \u0026#39;\u0026#39;); } // 获取数据 async function getData() { const isNetworkAvailable = await checkNetwork(); const browser = await puppeteer.launch({ headless: \u0026#39;new\u0026#39;, executablePath: isNetworkAvailable?\u0026#39;/usr/bin/google-chrome-stable\u0026#39;:\u0026#39;\u0026#39;, args: isNetworkAvailable ? [\u0026#39;--no-sandbox\u0026#39;] : [`--proxy-server=127.0.0.1:7890`] //根据环境传递参数 }); // 只能通过移动端获取，所以将浏览器设定为移动端，并随机抽取ua const ualist = [ \u0026#39;Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1\u0026#39;, \u0026#39;Mozilla/5.0 (Linux; Android 13; V2183A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/17.2.0.1\u0026#39;, \u0026#39;Mozilla/5.0 (Android 13; Mobile; rv:120.0) Gecko/120.0 Firefox/120.0\u0026#39; ]; const ua = ualist[Math.floor(Math.random() * ualist.length)]; const page = await browser.newPage(); await page.setViewport({ width: 375, height: 667, isMobile: true }); await page.setUserAgent(ua); try { await page.goto(\u0026#39;https://open.spotify.com/artist/0BezPR1Hn38i8qShQKunSD\u0026#39;); const listenersElement = await page.$(\u0026#39;[data-testid=\u0026#34;monthly-listeners-label\u0026#34;]\u0026#39;); const followersElement = await page.$( \u0026#39;[data-testid=\u0026#34;artist-entity-view\u0026#34;]\u0026gt;div\u0026gt;div\u0026gt;div:nth-child(8)\u0026gt;p\u0026#39; ); const listenersText = listenersElement ? await (await listenersElement.getProperty(\u0026#39;textContent\u0026#39;)).jsonValue() : \u0026#39;N/A\u0026#39;; const followersText = followersElement ? await (await followersElement.getProperty(\u0026#39;textContent\u0026#39;)).jsonValue() : \u0026#39;N/A\u0026#39;; const listeners = pureData(listenersText); const followers = pureData(followersText); return { listeners, followers }; } catch (error) { console.error(\u0026#39;出现错误:\u0026#39;, error); } finally { await browser.close(); } } // 写入数据 async function saveToCsvFile(listeners, followers) { console.log(new Date().toLocaleString(), listeners, followers); const data = `${new Date().toLocaleString(\u0026#39;zh-CN\u0026#39;)},${listeners},${followers}\\n`; try { fs.appendFileSync(filePath, data, \u0026#39;utf8\u0026#39;); console.log(`数据已成功写入到 ${filePath} 文件！`); } catch (error) { console.error(\u0026#39;写入文件时出现错误:\u0026#39;, error); } } // 运行 async function processDataAndSave() { const { listeners, followers } = await getData(); saveToCsvFile(listeners, followers); } processDataAndSave(); 部署 由于是在node环境里的，所以运行命令为 node spotify.js 。可以放到 package.json 的scripts部分，部署后选择该命令为启动选项即可。设置定时任务之后就可以脱手了。\n参考 Troubleshooting | Puppeteer Date - JavaScript | MDN ","date":"2023-11-26T13:27:30+08:00","permalink":"https://blog.vtime.fun/post/29d67339/","title":"Node.js爬虫初尝试"},{"content":" fex-team/ueditor: rich text 富文本编辑器 安装 下载后解压并重命名为 ueditor ，上传到网站的 /e/extend/ 目录内。（网站的文件存储方案目前还在考虑中，等上传好了再放地址。）\n使用 这两项修改都是针对文章编辑的体验提升，所以修改的字段类型应为编辑器，如默认的文章模型中该字段为 newstext 。登录网站后台，打开 系统-数据表与系统模型-管理数据表 ，再点击 管理字段 进行修改即可。\n一键排版 注意：该插件依赖 JQuery 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;script src=\u0026#34;/e/extend/ueditor/jquery.min_1.8.3.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/e/extend/ueditor/formatText.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 自动获取文章标题 $(\u0026#34;input[name=\u0026#39;title\u0026#39;]\u0026#34;).change(function(){ $(\u0026#34;#Title\u0026#34;).val($(\u0026#34;input[name=\u0026#39;title\u0026#39;]\u0026#34;).val()); }); // 未审核文章自动排版 if(\u0026lt;?= $r[checked] ?\u0026gt; == 0){ setTimeout(()=\u0026gt;{ formatText() },5000) } \u0026lt;/script\u0026gt; \u0026lt;table width=\u0026#34;100%\u0026#34; border=\u0026#34;0\u0026#34; align=\u0026#34;center\u0026#34; cellpadding=\u0026#34;3\u0026#34; cellspacing=\u0026#34;1\u0026#34; class=\u0026#34;tableborder\u0026#34;\u0026gt;\u0026lt;tr class=\u0026#34;header\u0026#34;\u0026gt;\u0026lt;td\u0026gt;\u0026lt;label for=\u0026#34;Title\u0026#34;\u0026gt;图片标题\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;Title\u0026#34; name=\u0026#34;Title\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;input id=\u0026#34;CenterImg\u0026#34; name=\u0026#34;CenterImg\u0026#34; type=\u0026#34;checkbox\u0026#34; checked\u0026gt;\u0026lt;label for=\u0026#34;CenterImg\u0026#34;\u0026gt;图片居中\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearImg\u0026#34; name=\u0026#34;clearImg\u0026#34; type=\u0026#34;checkbox\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearImg\u0026#34;\u0026gt;清除图片\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearLine\u0026#34; name=\u0026#34;clearLine\u0026#34; type=\u0026#34;checkbox\u0026#34; checked=\u0026#34;checked\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearLine\u0026#34;\u0026gt;格式化行\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearScript\u0026#34; name=\u0026#34;clearScript\u0026#34; type=\u0026#34;checkbox\u0026#34; checked=\u0026#34;checked\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearScript\u0026#34;\u0026gt;清除脚本\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearObject\u0026#34; name=\u0026#34;clearObject\u0026#34; type=\u0026#34;checkbox\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearObject\u0026#34;\u0026gt;清除对象\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearAttr\u0026#34; name=\u0026#34;clearAttr\u0026#34; type=\u0026#34;checkbox\u0026#34; checked=\u0026#34;checked\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearAttr\u0026#34;\u0026gt;清除属性\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearA\u0026#34; name=\u0026#34;clearA\u0026#34; type=\u0026#34;checkbox\u0026#34; checked=\u0026#34;checked\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearA\u0026#34;\u0026gt;清除链接\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearUL\u0026#34; name=\u0026#34;clearUL\u0026#34; type=\u0026#34;checkbox\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearUL\u0026#34;\u0026gt;清除列表\u0026lt;/label\u0026gt;\u0026lt;input id=\u0026#34;clearTb\u0026#34; name=\u0026#34;clearTb\u0026#34; type=\u0026#34;checkbox\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;clearTb\u0026#34;\u0026gt;清除表格\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;button\u0026#34; id=\u0026#34;formatTextButton\u0026#34; name=\u0026#34;formatTextButton\u0026#34; value=\u0026#34;一键排版\u0026#34; onClick=\u0026#34;formatText()\u0026#34;\u0026gt;\u0026lt;input name=\u0026#34;this_reset\u0026#34; id=\u0026#34;this_reset\u0026#34; type=\u0026#34;reset\u0026#34; value=\u0026#34;重置\u0026#34; /\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt; 百度编辑器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;?php $ziduan=\u0026#39;newstext\u0026#39;;//编辑器使用的字段名称 if($enews==\u0026#39;MAddInfo\u0026#39; || $enews==\u0026#39;MEditInfo\u0026#39;){//前台投稿 $qiantai=1; $ziduanzhi=$ecmsfirstpost==1?\u0026#34;\u0026#34;:DoReqValue($mid,$ziduan,stripSlashes($r[$ziduan])); }else{//后台 $qiantai=0; $ziduanzhi=$ecmsfirstpost==1?\u0026#34;\u0026#34;:stripSlashes($r[$ziduan]); } ?\u0026gt; \u0026lt;script\u0026gt;var classid=\u0026#39;\u0026lt;?=$classid?\u0026gt;\u0026#39;,infoid=\u0026#39;\u0026lt;?=$id?\u0026gt;\u0026#39;,filepass=\u0026#39;\u0026lt;?=$filepass?\u0026gt;\u0026#39;,ehash=\u0026#39;\u0026lt;?=$ecms_hashur[ehref]?\u0026gt;\u0026#39;,qiantai=\u0026#39;\u0026lt;?=$qiantai?\u0026gt;\u0026#39;;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;\u0026lt;?=$public_r[\u0026#39;newsurl\u0026#39;]?\u0026gt;e/extend/ueditor/ueditor.config.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;\u0026lt;?=$public_r[\u0026#39;newsurl\u0026#39;]?\u0026gt;e/extend/ueditor/ueditor.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;\u0026lt;?=$public_r[\u0026#39;newsurl\u0026#39;]?\u0026gt;e/extend/ueditor/ueditor.toolbarconfig.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;textarea id=\u0026#34;\u0026lt;?=$ziduan?\u0026gt;\u0026#34; name=\u0026#34;\u0026lt;?=$ziduan?\u0026gt;\u0026#34;\u0026gt;\u0026lt;?=$ziduanzhi?\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;script\u0026gt; \u0026lt;?=$ziduan?\u0026gt;=UE.getEditor(\u0026#39;\u0026lt;?=$ziduan?\u0026gt;\u0026#39;,{ serverUrl: \u0026#34;\u0026lt;?=$public_r[\u0026#39;newsurl\u0026#39;]?\u0026gt;e/extend/ueditor/php/controller.php\u0026#34;,//自己的请求接口 toolbars:Default,//工具栏配置文件，具体参考ueditor.toolbarconfig.js文件中说明 pageBreakTag:\u0026#39;\u0026#39;,//帝国分页标签 initialFrameWidth:\u0026#39;100%\u0026#39;,//编辑器宽 initialFrameHeight:200//编辑器高 //等等其它配置自行添加，参考UE默认配置文件复制修改即可 }); //自定义请求参数 \u0026lt;?=$ziduan?\u0026gt;.ready(function(){ \u0026lt;?=$ziduan?\u0026gt;.execCommand(\u0026#39;serverparam\u0026#39;,{ \u0026#39;filepass\u0026#39;:\u0026#39;\u0026lt;?=$filepass?\u0026gt;\u0026#39;,//修改时候是信息ID \u0026#39;classid\u0026#39; :\u0026#39;\u0026lt;?=$classid?\u0026gt;\u0026#39;, \u0026#39;qiantai\u0026#39;:\u0026lt;?=$qiantai?\u0026gt; }); }); \u0026lt;/script\u0026gt; \u0026lt;table width=\u0026#34;100%\u0026#34; border=\u0026#34;0\u0026#34; cellpadding=\u0026#34;3\u0026#34; cellspacing=\u0026#34;1\u0026#34; bgcolor=\u0026#34;#DBEAF5\u0026#34;\u0026gt; \u0026lt;tr height=\u0026#34;25\u0026#34;\u0026gt; \u0026lt;td bgcolor=\u0026#34;#FFFFFF\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;dokey\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;1\u0026#34; \u0026lt;?=$r[dokey]==1?\u0026#39; checked\u0026#39;:\u0026#39;\u0026#39;?\u0026gt;\u0026gt;关键字替换\u0026amp;nbsp;\u0026amp;nbsp;\u0026lt;input name=\u0026#34;copyimg\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;copyimg\u0026#34; checked value=\u0026#34;1\u0026#34;\u0026gt;远程保存图片(\u0026lt;input name=\u0026#34;mark\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;mark\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;SetEnews.php\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;加水印\u0026lt;/a\u0026gt;)\u0026amp;nbsp;\u0026amp;nbsp;\u0026lt;input name=\u0026#34;copyflash\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;copyflash\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;远程保存FLASH(地址前缀：\u0026lt;input name=\u0026#34;qz_url\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;qz_url\u0026#34; size=\u0026#34;\u0026#34;\u0026gt;) \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr height=\u0026#34;25\u0026#34;\u0026gt; \u0026lt;td bgcolor=\u0026#34;#FFFFFF\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;repimgnexturl\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;repimgnexturl\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; 图片链接转为下一页\u0026amp;nbsp;\u0026amp;nbsp;\u0026lt;input name=\u0026#34;autopage\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;autopage\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;自动分页,每\u0026lt;input name=\u0026#34;autosize\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;autosize\u0026#34; value=\u0026#34;5000\u0026#34; size=\u0026#34;5\u0026#34;\u0026gt;个字节为一页\u0026amp;nbsp;\u0026amp;nbsp;取第\u0026lt;input name=\u0026#34;getfirsttitlepic\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;getfirsttitlepic\u0026#34; value=\u0026#34;1\u0026#34; size=\u0026#34;1\u0026#34;\u0026gt;张上传图为标题图片(\u0026lt;input name=\u0026#34;getfirsttitlespic\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;getfirsttitlespic\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;缩略图: 宽\u0026lt;input name=\u0026#34;getfirsttitlespicw\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;getfirsttitlespicw\u0026#34; size=\u0026#34;3\u0026#34; value=\u0026#34;\u0026lt;?=$public_r[spicwidth]?\u0026gt;\u0026#34;\u0026gt;*高\u0026lt;input name=\u0026#34;getfirsttitlespich\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;getfirsttitlespich\u0026#34; size=\u0026#34;3\u0026#34; value=\u0026#34;\u0026lt;?=$public_r[spicheight]?\u0026gt;\u0026#34;\u0026gt;) \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; ","date":"2023-10-26T13:56:17+08:00","permalink":"https://blog.vtime.fun/post/c82eb1ea/","title":"帝国CMS整合一键排版和百度编辑器"},{"content":"安装 官网 Download for Windows Windows 直接下载安装包安装即可，采用包管理器方式安装也行。Linux 各个发行版安装方式大同小异，Git 的优先级很高，直接安装就行。\n1 2 3 4 5 6 7 8 # Windows scoop install git # macOS brew install git # Debian/Ubuntu apt-get install git # Arch Linux pacman -S git 配置 git config 配置用户名和邮箱，--global 配置全局，--local 配置当前项目。\n1 2 git config --global user.name yourname git config --global user.email yourname@example.com ssh 通常采用 ed25519 或 rsa 算法生成，此处采用 ed25519 算法：\n1 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; 运行后会在用户目录下创建 .ssh 文件夹并生成 id_ed25519 和 id_ed25519.pub ，其中 id_ed25519.pub 是公钥文件，将内容复制到剪贴板后添加到 GitHub 账号设置中即可，其他 Git 托管平台操作方法也是一样的。\n常用 git clone 克隆线上仓库到本地 git status 查看项目状态 git add 添加到暂存区，可指定添加目录或文件或采用其他选项：. 添加所有文件 git commit 提交：-m 选项可附加备注 git reset --hard HEAD^ 回退并清空工作区和暂存区，放弃本地修改 git reset --soft HEAD^ 回退到commit之前add之后 git push 后接仓库和分支，通常为 git push origin main 或 git push origin master 参考 新增 SSH 密钥到 GitHub 帐户 - GitHub 文档 ","date":"2023-10-21T21:49:58+08:00","permalink":"https://blog.vtime.fun/post/0a8fca5e/","title":"Git 基础使用"},{"content":"安装 Hugo 框架 Stack 主题 快速启动 主题提供快速启动模板，点击 Use this template 并选择 Create a new repository 。\n如需启用 GitHub Pages 则要将仓库设为公开。\n常规安装 如果是在本地使用，则需要安装 Git 、 Go 和 Hugo extended 。Scoop 是Windows平台的包管理器，可以选择使用它来进行安装。\n1 2 Set-ExecutionPolicy RemoteSigned -Scope CurrentUser #打开PowerShell远程权限 irm get.scoop.sh | iex #获取并安装Scoop Scoop 使用示例：\nscoop install hugo-extended 安装Hugo scoop update hugo-extended 更新Hugo 创建站点并安装主题：\n1 2 3 hugo new site Blog \u0026amp;\u0026amp; cd Blog #新建站点并切换到该目录 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack #将主题下载到本地 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack #设置主题为Git子模块 配置 站点配置 配置文件为 /config/_default/ 目录下的文件，按需修改配置。\n_languages.toml 多语言 config.toml 域名和语言 markup.toml Markdown渲染器 menu.toml 社交媒体 module.toml 引入模块 params.toml 常规配置 permalinks.toml 链接地址 related.toml 相关内容 修改FrontMatter 新建文件 /archetypes/default.md ，粘贴新建博文的配置到该文件：\n1 2 3 4 5 6 7 8 9 10 --- title: {{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }} description: date: {{ .Date }} categories: tags: [\u0026#39;\u0026#39;] image: slug: {{ substr (md5 (printf \u0026#34;%s%s\u0026#34; .Date (replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title))) 4 8 }} draft: true --- 使用 常用命令 hugo new post/1/index.md 新建文章 hugo server -D 运行本地服务器，-D表示包含草稿，-p可指定端口 hugo 生成静态文件，默认目录为public hugo version 查看Hugo版本 部署 GitHub Pages 如果仓库名是 用户名.github.io ，会自动启用 GitHub Pages 。进入仓库将部署的分支改为 gh-pages ，然后等待自动部署完成即可。\n自定义域名 首先将域名 CNAME 解析到 GitHub Pages ：\n然后在仓库设置中绑定该域名并启用强制HTTPS：\n参考 Getting Started | Stack 关于自定义域名和 GitHub 页面 - GitHub 文档 Front matter | Hugo Hugo 永久链接 - Ramen\u0026rsquo;s Box 云解析 DNS 各记录类型说明及规则-操作指南-文档中心-腾讯云 ","date":"2023-10-19T15:06:20+08:00","permalink":"https://blog.vtime.fun/post/45d9727b/","title":"Hugo 博客搭建"}]